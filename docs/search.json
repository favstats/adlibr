[{"path":"https://favstats.github.io/liads/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 liads authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://favstats.github.io/liads/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabio Votta. Author, maintainer.","code":""},{"path":"https://favstats.github.io/liads/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Votta F (2025). liads: LinkedIn Ad Library API Client. R package version 1.0.0, https://favstats.github.io/liads, https://github.com/favstats/liads.","code":"@Manual{,   title = {liads: LinkedIn Ad Library API Client},   author = {Fabio Votta},   year = {2025},   note = {R package version 1.0.0, https://favstats.github.io/liads},   url = {https://github.com/favstats/liads}, }"},{"path":"https://favstats.github.io/liads/index.html","id":"liads","dir":"","previous_headings":"","what":"liads • LinkedIn Ad Library API Client","title":"liads • LinkedIn Ad Library API Client","text":"liads comprehensive R client LinkedIn Ad Library API. provides tools OAuth 2.0 authentication, querying ads various criteria, automatic pagination, robust data processing.","code":""},{"path":"https://favstats.github.io/liads/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"liads • LinkedIn Ad Library API Client","text":"can install development version liads GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"favstats/liads\")"},{"path":[]},{"path":"https://favstats.github.io/liads/index.html","id":"id_1-authentication-setup","dir":"","previous_headings":"Quick Start","what":"1. Authentication Setup","title":"liads • LinkedIn Ad Library API Client","text":"First, set LinkedIn Developer App credentials (one-time setup):","code":"library(liads)  # Configure your LinkedIn app credentials li_auth_configure()  # You'll be prompted to enter Client ID and Secret  # Authenticate (opens browser for OAuth) li_auth()"},{"path":"https://favstats.github.io/liads/index.html","id":"id_2-basic-usage","dir":"","previous_headings":"Quick Start","what":"2. Basic Usage","title":"liads • LinkedIn Ad Library API Client","text":"basic search uses just keyword. returns raw data list-columns detailed analysis:","code":"# Simple keyword search marketing_ads <- li_query(   keyword = \"marketing\",   max_pages = 1 ) #> ℹ Retrieving page 1 (starting at index 0)... #> ✔ Retrieved 25 ads. #> ✔ Reached `max_pages` limit. #> ✔ Total ads retrieved: 25 marketing_ads #> # A tibble: 25 × 13 #>    ad_url       is_restricted restriction_details advertiser_name advertiser_url #>    <chr>        <lgl>         <chr>               <chr>           <chr>          #>  1 https://www… FALSE         <NA>                LinearB         https://www.l… #>  2 https://www… FALSE         <NA>                Julie Yingst    https://www.l… #>  3 https://www… FALSE         <NA>                LinearB         https://www.l… #>  4 https://www… FALSE         <NA>                FORM Digital    https://www.l… #>  5 https://www… FALSE         <NA>                FinListics Sol… https://www.l… #>  6 https://www… FALSE         <NA>                Salesforce      https://www.l… #>  7 https://www… FALSE         <NA>                HENNGE (North … https://www.l… #>  8 https://www… FALSE         <NA>                LinearB         https://www.l… #>  9 https://www… FALSE         <NA>                Splash (Splash… https://www.l… #> 10 https://www… FALSE         <NA>                Aeqium          https://www.l… #> # ℹ 15 more rows #> # ℹ 8 more variables: ad_payer <chr>, ad_type <chr>, #> #   first_impression_at <dttm>, latest_impression_at <dttm>, #> #   total_impressions_from <int>, total_impressions_to <int>, #> #   impressions_by_country <list>, ad_targeting <list>"},{"path":"https://favstats.github.io/liads/index.html","id":"searching-by-country","dir":"","previous_headings":"Quick Start","what":"Searching by Country","title":"liads • LinkedIn Ad Library API Client","text":"targeted results, search within specific countries:","code":"us_ads <- li_query(   countries = c(\"us\"),   max_pages = 2,   count = 10 ) #> ℹ Retrieving page 1 (starting at index 0)... #> ✔ Retrieved 10 ads. #> ℹ Retrieving page 2 (starting at index 10)... #> ✔ Retrieved 10 ads. #> ✔ Reached `max_pages` limit. #> ✔ Total ads retrieved: 20  us_ads #> # A tibble: 20 × 13 #>    ad_url       is_restricted restriction_details advertiser_name advertiser_url #>    <chr>        <lgl>         <chr>               <chr>           <chr>          #>  1 https://www… FALSE         <NA>                Every           https://www.l… #>  2 https://www… FALSE         <NA>                Salesforce      https://www.l… #>  3 https://www… FALSE         <NA>                Box             https://www.l… #>  4 https://www… FALSE         <NA>                Michael Starkey https://www.l… #>  5 https://www… FALSE         <NA>                Commvault       https://www.l… #>  6 https://www… FALSE         <NA>                Sunbuds         https://www.l… #>  7 https://www… FALSE         <NA>                American Indus… https://www.l… #>  8 https://www… FALSE         <NA>                Zip             https://www.l… #>  9 https://www… FALSE         <NA>                American Indus… https://www.l… #> 10 https://www… FALSE         <NA>                American Indus… https://www.l… #> 11 https://www… FALSE         <NA>                Pharmefex Cons… https://www.l… #> 12 https://www… FALSE         <NA>                Splash (Splash… https://www.l… #> 13 https://www… FALSE         <NA>                Seeds           https://www.l… #> 14 https://www… FALSE         <NA>                Splash (Splash… https://www.l… #> 15 https://www… FALSE         <NA>                Splash (Splash… https://www.l… #> 16 https://www… FALSE         <NA>                Splash (Splash… https://www.l… #> 17 https://www… FALSE         <NA>                La Donna Claude https://www.l… #> 18 https://www… FALSE         <NA>                Delve - AI for… https://www.l… #> 19 https://www… FALSE         <NA>                Precision Risk… https://www.l… #> 20 https://www… FALSE         <NA>                ISU Steadfast … https://www.l… #> # ℹ 8 more variables: ad_payer <chr>, ad_type <chr>, #> #   first_impression_at <dttm>, latest_impression_at <dttm>, #> #   total_impressions_from <int>, total_impressions_to <int>, #> #   impressions_by_country <list>, ad_targeting <list>"},{"path":"https://favstats.github.io/liads/index.html","id":"how-search-works","dir":"","previous_headings":"","what":"How Search Works","title":"liads • LinkedIn Ad Library API Client","text":"Important: LinkedIn’s Ad Library searches based official API documentation: Keywords: Multiple keywords use logic - keywords must appear ad content Countries: shows ads actually served countries Dates: Filters ads served (created) Advertiser: Searches company names paid ads","code":""},{"path":"https://favstats.github.io/liads/index.html","id":"api-parameters","dir":"","previous_headings":"","what":"API Parameters","title":"liads • LinkedIn Ad Library API Client","text":"li_query() function supports parameters LinkedIn Ad Library API:","code":""},{"path":"https://favstats.github.io/liads/index.html","id":"data-structure","dir":"","previous_headings":"","what":"Data Structure","title":"liads • LinkedIn Ad Library API Client","text":"function returns tibble following columns:","code":"# Key columns include: # - ad_url: Direct link to ad preview # - advertiser_name: Name of the advertiser # - ad_type: Type of advertisement # - first_impression_at, latest_impression_at: Date ranges # - total_impressions_from, total_impressions_to: Impression ranges # - impressions_by_country: List-column with country breakdown # - ad_targeting: List-column with targeting criteria"},{"path":[]},{"path":"https://favstats.github.io/liads/index.html","id":"how-linkedin-ad-search-works","dir":"","previous_headings":"Advanced Examples","what":"How LinkedIn Ad Search Works","title":"liads • LinkedIn Ad Library API Client","text":"LinkedIn’s Ad Library API searches ad content using specific rules: Keyword Search: provide multiple keywords, treated logical operation. means keywords must appear ad content. Advertiser Search: can also search company/organization paid ads:","code":"# This searches for ads containing BOTH \"artificial\" AND \"intelligence\" AND \"machine\" AND \"learning\" tech_ads <- li_query(   keyword = \"artificial intelligence machine learning\",   countries = c(\"us\", \"gb\"),   start_date = \"2025-01-01\",    end_date = \"2025-01-31\",   max_pages = 2 ) #> ℹ Retrieving page 1 (starting at index 0)... #> ✔ Retrieved 25 ads. #> ℹ Retrieving page 2 (starting at index 25)... #> ✔ Retrieved 25 ads. #> ✔ Reached `max_pages` limit. #> ✔ Total ads retrieved: 50  tech_ads #> # A tibble: 50 × 13 #>    ad_url       is_restricted restriction_details advertiser_name advertiser_url #>    <chr>        <lgl>         <chr>               <chr>           <chr>          #>  1 https://www… FALSE         <NA>                OpenText        https://www.l… #>  2 https://www… FALSE         <NA>                Upwork          https://www.l… #>  3 https://www… FALSE         <NA>                Detekt Biomedi… https://www.l… #>  4 https://www… FALSE         <NA>                Web Summit      https://www.l… #>  5 https://www… FALSE         <NA>                OpenText        https://www.l… #>  6 https://www… FALSE         <NA>                Web Summit      https://www.l… #>  7 https://www… FALSE         <NA>                ServiceNow      https://www.l… #>  8 https://www… FALSE         <NA>                Web Summit      https://www.l… #>  9 https://www… FALSE         <NA>                Web Summit      https://www.l… #> 10 https://www… FALSE         <NA>                University of … https://www.l… #> # ℹ 40 more rows #> # ℹ 8 more variables: ad_payer <chr>, ad_type <chr>, #> #   first_impression_at <dttm>, latest_impression_at <dttm>, #> #   total_impressions_from <int>, total_impressions_to <int>, #> #   impressions_by_country <list>, ad_targeting <list> # Find all ads paid for by companies with \"Microsoft\" in their name microsoft_ads <- li_query(   advertiser = \"Microsoft\",   countries = c(\"us\"),   max_pages = 1,   count = 10 ) #> ℹ Retrieving page 1 (starting at index 0)... #> ✔ Retrieved 10 ads. #> ✔ Reached `max_pages` limit. #> ✔ Total ads retrieved: 10  microsoft_ads #> # A tibble: 10 × 13 #>    ad_url       is_restricted restriction_details advertiser_name advertiser_url #>    <chr>        <lgl>         <chr>               <chr>           <chr>          #>  1 https://www… FALSE         <NA>                Microsoft Azure https://www.l… #>  2 https://www… FALSE         <NA>                Microsoft 365   https://www.l… #>  3 https://www… FALSE         <NA>                Microsoft 365   https://www.l… #>  4 https://www… FALSE         <NA>                Microsoft 365   https://www.l… #>  5 https://www… FALSE         <NA>                Microsoft 365   https://www.l… #>  6 https://www… FALSE         <NA>                Microsoft 365   https://www.l… #>  7 https://www… FALSE         <NA>                Microsoft 365   https://www.l… #>  8 https://www… FALSE         <NA>                Microsoft 365   https://www.l… #>  9 https://www… FALSE         <NA>                Microsoft 365   https://www.l… #> 10 https://www… FALSE         <NA>                Microsoft Azure https://www.l… #> # ℹ 8 more variables: ad_payer <chr>, ad_type <chr>, first_impression_at <lgl>, #> #   latest_impression_at <lgl>, total_impressions_from <int>, #> #   total_impressions_to <int>, impressions_by_country <list>, #> #   ad_targeting <list>"},{"path":"https://favstats.github.io/liads/index.html","id":"analyzing-targeting-data","dir":"","previous_headings":"Advanced Examples","what":"Analyzing Targeting Data","title":"liads • LinkedIn Ad Library API Client","text":"LinkedIn ads include targeting information, interpretation requires caution. API shows segments advertisers claim target, doesn’t reveal much targeting precision. “Education” mean university graduates current students? meant “Job”? job? information really included alas .","code":"# Unnest targeting data for analysis targeting_data <- tech_ads |>   tidyr::unnest(ad_targeting) |>   dplyr::filter(!is.na(facet_name))  print(paste(\"Found targeting data for\", nrow(targeting_data), \"targeting criteria\")) #> [1] \"Found targeting data for 33 targeting criteria\"  # Show the top targeting categories top_targeting <- targeting_data %>%    count(facet_name, sort = TRUE)  print(\"Most common targeting approaches:\") #> [1] \"Most common targeting approaches:\" head(top_targeting, 5) #> # A tibble: 4 × 2 #>   facet_name     n #>   <chr>      <int> #> 1 Language      11 #> 2 Location      11 #> 3 Audience       7 #> 4 Company        4"},{"path":"https://favstats.github.io/liads/index.html","id":"geographic-impression-analysis","dir":"","previous_headings":"Advanced Examples","what":"Geographic Impression Analysis","title":"liads • LinkedIn Ad Library API Client","text":"","code":"# Look for geographic impression data impression_data <- tech_ads |>   tidyr::unnest(impressions_by_country) |>   dplyr::filter(!is.na(country))   # Visualize top countries only (limit to avoid clutter) library(ggplot2)    # Get top 5 countries by total impression volume top_countries <- impression_data %>%    mutate(impression_per_country = total_impressions_to * (impression_percentage/100)) %>%    group_by(country) %>%    summarise(     total_ads = n(),     sum_impressions = sum(impression_per_country, na.rm = TRUE),     .groups = \"drop\"   ) %>%   arrange(desc(sum_impressions)) %>%   slice_head(n = 5)  print(\"Top 5 countries by number of ads:\") #> [1] \"Top 5 countries by number of ads:\" print(top_countries) #> # A tibble: 5 × 3 #>   country           total_ads sum_impressions #>   <chr>                 <int>           <dbl> #> 1 urn:li:country:IN         8         436775. #> 2 urn:li:country:FR         9         189111. #> 3 urn:li:country:EG         4         140344. #> 4 urn:li:country:GB        10         124144. #> 5 urn:li:country:NL         8          84478. # Visualize impression distribution for top countries only impression_data %>%   filter(country %in% top_countries$country) %>%   group_by(country) %>%   mutate(impression_per_country = total_impressions_to * (impression_percentage / 100)) %>%   group_by(country) %>%   summarise(     total_ads = n(),     sum_impressions = sum(impression_per_country, na.rm = TRUE),     .groups = \"drop\"   ) %>%   ggplot(aes(x = country, y = sum_impressions)) +   geom_col() +   labs(     title = \"Impression Percentage Distribution by Country\",     subtitle = \"Top 5 countries by ad volume\",     x = \"Country\",     y = \"Impression Percentage\"   ) +   theme_minimal()"},{"path":"https://favstats.github.io/liads/index.html","id":"clean-data-format-options","dir":"","previous_headings":"Advanced Examples","what":"Clean Data Format Options","title":"liads • LinkedIn Ad Library API Client","text":"clean = TRUE parameter simplifies data structure easier analysis: Notice key improvements wide format: - impressions_mid: Calculated midpoint impression ranges - targeting_facets: Summary targeting approaches - Country columns (data available): impression_pct_US, impression_pct_CA, etc.","code":"# Wide format: countries become separate columns, targeting flattened clean_wide <- li_query(   countries = c(\"us\"),   start_date = \"2025-01-01\",    end_date = \"2025-01-31\",   clean = TRUE,   direction = \"wide\",   max_pages = 1,   count = 5 ) #> ℹ Retrieving page 1 (starting at index 0)... #> ✔ Retrieved 5 ads. #> ✔ Reached `max_pages` limit. #> ✔ Total ads retrieved: 5  clean_wide #> # A tibble: 5 × 178 #>   ad_url        is_restricted restriction_details advertiser_name advertiser_url #>   <chr>         <lgl>         <chr>               <chr>           <chr>          #> 1 https://www.… FALSE         <NA>                Orca Security   https://www.l… #> 2 https://www.… FALSE         <NA>                KLOwen Ortho    https://www.l… #> 3 https://www.… FALSE         <NA>                Hashlock        https://www.l… #> 4 https://www.… FALSE         <NA>                Alkemi          https://www.l… #> 5 https://www.… FALSE         <NA>                Hashlock        https://www.l… #> # ℹ 173 more variables: ad_payer <chr>, ad_type <chr>, #> #   first_impression_at <dttm>, latest_impression_at <dttm>, #> #   total_impressions_from <int>, total_impressions_to <int>, #> #   impressions_mid <dbl>, targeting_facets <chr>, targeting_segments <chr>, #> #   impression_pct_GQ <dbl>, impression_pct_NU <dbl>, impression_pct_WS <dbl>, #> #   impression_pct_AD <dbl>, impression_pct_AM <dbl>, impression_pct_AR <dbl>, #> #   impression_pct_BI <dbl>, impression_pct_BS <dbl>, … # Long format: all targeting/impression data stacked with type indicators clean_long <- li_query(   countries = c(\"fr\"),   start_date = \"2025-01-01\",    end_date = \"2025-01-31\",   clean = TRUE,   direction = \"long\",   max_pages = 1,   count = 5 ) #> ℹ Retrieving page 1 (starting at index 0)... #> ✔ Retrieved 5 ads. #> ✔ Reached `max_pages` limit. #> ✔ Total ads retrieved: 5  clean_long #> # A tibble: 347 × 18 #>    ad_url       is_restricted restriction_details advertiser_name advertiser_url #>    <chr>        <lgl>         <chr>               <chr>           <chr>          #>  1 https://www… FALSE         <NA>                Codecov         https://www.l… #>  2 https://www… FALSE         <NA>                Codecov         https://www.l… #>  3 https://www… FALSE         <NA>                Codecov         https://www.l… #>  4 https://www… FALSE         <NA>                Codecov         https://www.l… #>  5 https://www… FALSE         <NA>                Codecov         https://www.l… #>  6 https://www… FALSE         <NA>                Codecov         https://www.l… #>  7 https://www… FALSE         <NA>                Codecov         https://www.l… #>  8 https://www… FALSE         <NA>                Codecov         https://www.l… #>  9 https://www… FALSE         <NA>                Codecov         https://www.l… #> 10 https://www… FALSE         <NA>                Codecov         https://www.l… #> # ℹ 337 more rows #> # ℹ 13 more variables: ad_payer <chr>, ad_type <chr>, #> #   first_impression_at <dttm>, latest_impression_at <dttm>, #> #   total_impressions_from <int>, total_impressions_to <int>, #> #   impressions_mid <dbl>, data_type <chr>, category <chr>, value <chr>, #> #   is_included <lgl>, is_excluded <lgl>, percentage <dbl>"},{"path":[]},{"path":"https://favstats.github.io/liads/index.html","id":"rate-limits-and-best-practices","dir":"","previous_headings":"","what":"Rate Limits and Best Practices","title":"liads • LinkedIn Ad Library API Client","text":"Maximum 25 results per request (API limitation) Use pagination large datasets max_pages parameter Specific searches may return fewer results broad searches Date ranges: start inclusive, end exclusive Keywords: Multiple keywords use logic Countries: Use lowercase 2-letter ISO codes","code":""},{"path":"https://favstats.github.io/liads/index.html","id":"authentication-details","dir":"","previous_headings":"","what":"Authentication Details","title":"liads • LinkedIn Ad Library API Client","text":"package uses OAuth 2.0 automatic token caching: Setup: li_auth_configure() stores app credentials .Renviron Authentication: li_auth() opens browser user consent Token Storage: Tokens cached .httr-oauth reuse Automatic Refresh: Tokens automatically refreshed needed","code":""},{"path":"https://favstats.github.io/liads/index.html","id":"api-reference","dir":"","previous_headings":"","what":"API Reference","title":"liads • LinkedIn Ad Library API Client","text":"Full API documentation available : https://www.linkedin.com/ad-library/api/ads","code":""},{"path":"https://favstats.github.io/liads/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"liads • LinkedIn Ad Library API Client","text":"Please report bugs feature requests : https://github.com/favstats/liads/issues","code":""},{"path":"https://favstats.github.io/liads/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"liads • LinkedIn Ad Library API Client","text":"MIT License. See LICENSE file details.","code":""},{"path":"https://favstats.github.io/liads/reference/build_countries_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Country Parameter String — build_countries_param","title":"Build Country Parameter String — build_countries_param","text":"Formats vector 2-letter country codes specific URN list format required LinkedIn API.","code":""},{"path":"https://favstats.github.io/liads/reference/build_countries_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Country Parameter String — build_countries_param","text":"","code":"build_countries_param(countries)"},{"path":"https://favstats.github.io/liads/reference/build_countries_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Country Parameter String — build_countries_param","text":"countries character vector lowercase 2-letter ISO country codes (e.g., c(\"us\", \"gb\")).","code":""},{"path":"https://favstats.github.io/liads/reference/build_countries_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Country Parameter String — build_countries_param","text":"URL-encoded string countries parameter.","code":""},{"path":"https://favstats.github.io/liads/reference/build_daterange_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Date Range Parameter String — build_daterange_param","title":"Build Date Range Parameter String — build_daterange_param","text":"Formats start end dates specific date range format required LinkedIn API.","code":""},{"path":"https://favstats.github.io/liads/reference/build_daterange_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Date Range Parameter String — build_daterange_param","text":"","code":"build_daterange_param(start_date, end_date)"},{"path":"https://favstats.github.io/liads/reference/build_daterange_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Date Range Parameter String — build_daterange_param","text":"start_date start date (Date object \"YYYY-MM-DD\" string). end_date end date (Date object \"YYYY-MM-DD\" string).","code":""},{"path":"https://favstats.github.io/liads/reference/build_daterange_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Date Range Parameter String — build_daterange_param","text":"URL-encoded string dateRange parameter.","code":""},{"path":"https://favstats.github.io/liads/reference/clean_liads_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean LinkedIn Ads Data by Unnesting List Columns — clean_liads_data","title":"Clean LinkedIn Ads Data by Unnesting List Columns — clean_liads_data","text":"internal function takes raw LinkedIn ads data creates cleaned version without list-columns unnesting targeting impression data.","code":""},{"path":"https://favstats.github.io/liads/reference/clean_liads_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean LinkedIn Ads Data by Unnesting List Columns — clean_liads_data","text":"","code":"clean_liads_data(data, direction = \"wide\")"},{"path":"https://favstats.github.io/liads/reference/clean_liads_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean LinkedIn Ads Data by Unnesting List Columns — clean_liads_data","text":"data tibble li_query() list-columns direction Character. \"wide\" \"long\" format output","code":""},{"path":"https://favstats.github.io/liads/reference/clean_liads_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean LinkedIn Ads Data by Unnesting List Columns — clean_liads_data","text":"cleaned tibble without list-columns","code":""},{"path":"https://favstats.github.io/liads/reference/li_auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate with LinkedIn (3-Legged OAuth) — li_auth","title":"Authenticate with LinkedIn (3-Legged OAuth) — li_auth","text":"second step. initiates 3-legged OAuth 2.0 flow. open web browser, ask log LinkedIn authorize application scopes. authorization, automatically fetches caches access token future use.","code":""},{"path":"https://favstats.github.io/liads/reference/li_auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate with LinkedIn (3-Legged OAuth) — li_auth","text":"","code":"li_auth(scope = \"openid profile\", cache = TRUE, new_user = FALSE)"},{"path":"https://favstats.github.io/liads/reference/li_auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authenticate with LinkedIn (3-Legged OAuth) — li_auth","text":"scope space-delimited string permissions application requesting. Per new OpenID Connect docs, defaults \"openid profile\". cache Logical string. TRUE caches token file named .httr-oauth current working directory. Caching highly recommended. new_user Logical. Set TRUE force new authentication, even cached token exists.","code":""},{"path":"https://favstats.github.io/liads/reference/li_auth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate with LinkedIn (3-Legged OAuth) — li_auth","text":"Token2.0 object, automatically cached.","code":""},{"path":"https://favstats.github.io/liads/reference/li_auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authenticate with LinkedIn (3-Legged OAuth) — li_auth","text":"","code":"if (FALSE) { # \\dontrun{ # After configuring, run this to authenticate. Your browser will open. li_token <- li_auth() } # }"},{"path":"https://favstats.github.io/liads/reference/li_auth_configure.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure LinkedIn Application Credentials — li_auth_configure","title":"Configure LinkedIn Application Credentials — li_auth_configure","text":"first step authentication process. securely stores application's Client ID Client Secret .Renviron file, making available R sessions. need run per project/machine.","code":""},{"path":"https://favstats.github.io/liads/reference/li_auth_configure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure LinkedIn Application Credentials — li_auth_configure","text":"","code":"li_auth_configure(force = FALSE, verbose = TRUE)"},{"path":"https://favstats.github.io/liads/reference/li_auth_configure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure LinkedIn Application Credentials — li_auth_configure","text":"force Logical. TRUE, overwrite existing credentials without asking. verbose Logical. TRUE, provides detailed output.","code":""},{"path":"https://favstats.github.io/liads/reference/li_auth_configure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure LinkedIn Application Credentials — li_auth_configure","text":"Invisibly returns TRUE success.","code":""},{"path":"https://favstats.github.io/liads/reference/li_auth_configure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure LinkedIn Application Credentials — li_auth_configure","text":"","code":"if (FALSE) { # \\dontrun{ # Run this function once to set up your credentials li_auth_configure() } # }"},{"path":"https://favstats.github.io/liads/reference/li_get_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a Valid LinkedIn Access Token — li_get_token","title":"Get a Valid LinkedIn Access Token — li_get_token","text":"helper function API functions use. retrieves cached token, token expired, automatically attempts refresh using stored refresh token.","code":""},{"path":"https://favstats.github.io/liads/reference/li_get_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a Valid LinkedIn Access Token — li_get_token","text":"","code":"li_get_token(cache_path = \".httr-oauth\")"},{"path":"https://favstats.github.io/liads/reference/li_get_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a Valid LinkedIn Access Token — li_get_token","text":"cache_path Path cached token file. Defaults .httr-oauth.","code":""},{"path":"https://favstats.github.io/liads/reference/li_get_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a Valid LinkedIn Access Token — li_get_token","text":"Token2.0 object, NULL valid token can found/refreshed.","code":""},{"path":"https://favstats.github.io/liads/reference/li_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the LinkedIn Ad Library with Automatic Pagination — li_query","title":"Query the LinkedIn Ad Library with Automatic Pagination — li_query","text":"function queries LinkedIn Ad Library API based specified criteria. automatically handles pagination retrieve available results specified max_pages limit. Supports official API parameters including keyword search, advertiser filtering, country targeting, date ranges.","code":""},{"path":"https://favstats.github.io/liads/reference/li_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the LinkedIn Ad Library with Automatic Pagination — li_query","text":"","code":"li_query(   keyword = NULL,   advertiser = NULL,   countries = NULL,   start_date = NULL,   end_date = NULL,   count = 25,   max_pages = Inf,   linkedin_api_version = \"202409\",   verbose = TRUE,   clean = FALSE,   direction = \"wide\" )"},{"path":"https://favstats.github.io/liads/reference/li_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the LinkedIn Ad Library with Automatic Pagination — li_query","text":"keyword string one space-separated keywords search ad content. Multiple keywords treated logical operation. Optional. advertiser string containing name advertiser filter . Optional. countries character vector 2-letter ISO country codes (e.g., c(\"us\", \"gb\", \"de\")). Case insensitive. Optional. start_date start date ad search range (inclusive). Can Date object \"YYYY-MM-DD\" string. Optional. end_date end date ad search range (exclusive). Can Date object \"YYYY-MM-DD\" string. Optional. count number ads return per page. Maximum 25 (API limitation). Defaults 25. max_pages maximum number pages retrieve. Set control API usage. Defaults Inf (retrieve available pages). linkedin_api_version LinkedIn API version use. Defaults \"202409\". normally need changed. verbose Logical. TRUE, provides detailed progress output execution. Defaults TRUE. clean Logical. TRUE, returns simplified dataset without list-columns. Targeting impression data unnested joined main data. Defaults FALSE. direction Character. clean=TRUE, specifies output format: \"wide\" (default) keeps separate rows targeting/impression combination, \"long\" creates longer format one row per targeting facet impression country. used clean=TRUE. Defaults \"wide\".","code":""},{"path":"https://favstats.github.io/liads/reference/li_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the LinkedIn Ad Library with Automatic Pagination — li_query","text":"tibble containing ad data following columns: ad_url Direct URL ad preview page is_restricted Boolean indicating ad violates LinkedIn policies restriction_details Details policy violations () advertiser_name Name advertising organization advertiser_url LinkedIn page URL advertiser ad_payer Entity paid advertisement ad_type Format/type advertisement (e.g., \"SPOTLIGHT_V2\") first_impression_at First time ad shown (POSIXct) latest_impression_at recent time ad shown (POSIXct) total_impressions_from Lower bound total impressions total_impressions_to Upper bound total impressions impressions_by_country List-column country-wise impression data ad_targeting List-column detailed targeting criteria","code":""},{"path":"https://favstats.github.io/liads/reference/li_query.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"Query the LinkedIn Ad Library with Automatic Pagination — li_query","text":"Requires prior authentication using li_auth_configure li_auth. function automatically uses cached OAuth tokens.","code":""},{"path":"https://favstats.github.io/liads/reference/li_query.html","id":"rate-limits","dir":"Reference","previous_headings":"","what":"Rate Limits","title":"Query the LinkedIn Ad Library with Automatic Pagination — li_query","text":"LinkedIn API limits responses 25 ads per request. Use max_pages parameter control total number API calls. Large queries may take time complete.","code":""},{"path":"https://favstats.github.io/liads/reference/li_query.html","id":"api-reference","dir":"Reference","previous_headings":"","what":"API Reference","title":"Query the LinkedIn Ad Library with Automatic Pagination — li_query","text":"Based LinkedIn Ad Library API: https://www.linkedin.com/ad-library/api/ads","code":""},{"path":"https://favstats.github.io/liads/reference/li_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the LinkedIn Ad Library with Automatic Pagination — li_query","text":"","code":"if (FALSE) { # \\dontrun{ # First, authenticate: # li_auth() # readRenviron(\".Renviron\") # Run this after authenticating  # Example 1: Search for ads by keyword and country  # Example 2: Search for ads by a specific advertiser, limiting to 2 pages } # }"},{"path":"https://favstats.github.io/liads/reference/linkedin-api-reference.html","id":null,"dir":"Reference","previous_headings":"","what":"LinkedIn Ad Library API Reference — linkedin-api-reference","title":"LinkedIn Ad Library API Reference — linkedin-api-reference","text":"file provides comprehensive documentation reference information LinkedIn Ad Library API, based official documentation.","code":""},{"path":"https://favstats.github.io/liads/reference/linkedin-api-reference.html","id":"api-overview","dir":"Reference","previous_headings":"","what":"API Overview","title":"LinkedIn Ad Library API Reference — linkedin-api-reference","text":"LinkedIn's Ad Library application programming interface (API) helps perform custom searches ad data stored platform based advertiser, keywords, served dates served countries.","code":""},{"path":"https://favstats.github.io/liads/reference/linkedin-api-reference.html","id":"authentication","dir":"Reference","previous_headings":"","what":"Authentication","title":"LinkedIn Ad Library API Reference — linkedin-api-reference","text":"API uses OAuth 2.0 authentication. must: Configure LinkedIn app credentials using li_auth_configure() Authenticate using li_auth() obtain access token Use li_query() automatically uses cached token","code":""},{"path":"https://favstats.github.io/liads/reference/linkedin-api-reference.html","id":"query-parameters","dir":"Reference","previous_headings":"","what":"Query Parameters","title":"LinkedIn Ad Library API Reference — linkedin-api-reference","text":"API accepts following query parameters: keyword String. Keyword searched content ad. multiple keywords, separate using space. Multiple keywords treated logical operation. countries Array CountryUrns. CountryUrn URN representation lowercase 2-letter ISO country codes. advertiser String. Advertiser name searched advertiser ad. dateRange DateRange. Date range filter ads served dates. Start represents inclusive start time, End represents exclusive end time. start Integer. Used pagination. Starting index results. count Integer. Used pagination. Maximum 25 ads returned count less 25.","code":""},{"path":"https://favstats.github.io/liads/reference/linkedin-api-reference.html","id":"response-schema","dir":"Reference","previous_headings":"","what":"Response Schema","title":"LinkedIn Ad Library API Reference — linkedin-api-reference","text":"API returns AdsCreativeTransparencyEntity following structure: adUrl URL pointing ads preview URL details AdTransparencyCreativeEntityDetails object containing: advertiser: AdvertiserDetails (name, URL, payer) type: Ad format type (e.g., \"SPOTLIGHT_V2\", \"TEXT_AD\") adTargeting: Array targeting parameters adStatistics: Impression statistics date ranges isRestricted Boolean indicating ad violates LinkedIn's Advertising Policy restrictionDetails String restriction information (restricted ads )","code":""},{"path":"https://favstats.github.io/liads/reference/linkedin-api-reference.html","id":"example-usage","dir":"Reference","previous_headings":"","what":"Example Usage","title":"LinkedIn Ad Library API Reference — linkedin-api-reference","text":"","code":"# First-time setup li_auth_configure()  # Enter your LinkedIn app credentials li_auth()           # Authenticate via browser  # Search for ads by keyword and country ads_by_keyword <- li_query(   keyword = \"data science\",   countries = c(\"us\", \"ca\"),   start_date = \"2024-01-01\",   end_date = \"2024-03-31\" )  # Search for ads by advertiser ads_by_advertiser <- li_query(   advertiser = \"Google\",   countries = c(\"gb\"),   start_date = \"2024-05-01\",   end_date = \"2024-06-01\",   max_pages = 2 )"},{"path":"https://favstats.github.io/liads/reference/linkedin-api-reference.html","id":"rate-limits-and-best-practices","dir":"Reference","previous_headings":"","what":"Rate Limits and Best Practices","title":"LinkedIn Ad Library API Reference — linkedin-api-reference","text":"Maximum 25 results per request Use pagination start count parameters Date ranges: start inclusive, end exclusive Country codes lowercase 2-letter ISO codes Keywords searched logical operation","code":""},{"path":"https://favstats.github.io/liads/reference/linkedin-api-reference.html","id":"data-structure-details","dir":"Reference","previous_headings":"","what":"Data Structure Details","title":"LinkedIn Ad Library API Reference — linkedin-api-reference","text":"returned data frame contains following columns: ad_url Direct link ad preview is_restricted Boolean indicating policy violations restriction_details Details restrictions () advertiser_name Name advertising organization advertiser_url LinkedIn page URL advertiser ad_payer Entity paid ad ad_type Format/type advertisement first_impression_at First time ad shown (POSIXct) latest_impression_at recent time ad shown (POSIXct) total_impressions_from Lower bound total impressions total_impressions_to Upper bound total impressions impressions_by_country List-column country-wise impression data ad_targeting List-column targeting criteria details","code":""},{"path":"https://favstats.github.io/liads/reference/linkedin-api-reference.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"LinkedIn Ad Library API Reference — linkedin-api-reference","text":"LinkedIn Ad Library API Documentation: https://www.linkedin.com/ad-library/api/ads","code":""}]
